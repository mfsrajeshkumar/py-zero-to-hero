#####intro to OOPS in Python#####
> Object oriented Programming
> the principles of OOPs are based on 4 Pillars apart from Class and Objects
> A class has attributes and behaviour
1. Class
2. Object
3. Inheritance
4. Polymorphism
5. Abstraction
6. Encapsulation

(2, 3) --> object or entity of int class
1.34, 34.5 --> are object or entity of float class


What we can do are know as behaviour(coding, sleeping, running)
What we have are known as attributes (hands, legs, eyes, mouth, head, stomach)

class Human:
    attributes : legs, nationality
    behaviours : walk, eat, speak

Class is just a template which we willl use for creating the same class type of object

# Abstraction:
Ex# You have ordered a soup so you will be only intereseted to test that but not want to know  how it's made.
> Abstarction means displaying only essential information and hiding the details.
> Example: Car will accelerate but internal working of engine not exposed

# Encapsulation:
> Building of data into  a single unit.
> Building of all methods that can act on object of that data.
> Car can have colors, brake, engine and lot of other methods

#Inheritance:
Human class will be inherited in Employee, Professor classes.

> When a class derives from another class.
> Any new car company can inherit all the information from car class

# Polymorphism
> The word "polymorphism" means having many forms.
> Same class method can work differently for  different objects.

2 + 2 = 4
"2" + "2" = "22"


######Class & Object in Python#####
#Creating classes
> It's a blueprint to create objects
> The class keyword is used to create classes
> By general convention we start name with capital letter
> Example: int, float, string etc
class Car:
    pass


# Objects:
> Objects are instances or entities of a class
> It has all the properties of it's class
> Ex# 1, 2 are objects of int Class

honda = Car()
type(honda) // __main__.Car
type(1) int
type("raj") str

######Class Constructor#######
# Constructor:
> A constructor is a special method used to create and intialize an object of a class.
> This method is defined in the class.
> The constructor is executed automatically at the time of object creation.

class ClassName:
    function --> or methods

class Human:
    # I want some properties to be with every uman objects
    # Dunder __

    def __init__(self, name, age, hobby):
        self.name =  name
        self.age = age
        self.hobby = hobby
        print("This will always execute")

rajesh = Human("Raj", 25, "coding")
print(rajesh)// <__main__.Human object at 0x7fa230013220>
rajesh.name // Raj  

Attributes common for all objects

#####Class Methods#######
# Methods 
> Apart from special methods you can make your custom methods
> Example: Humans can speak, greet etc.
class Human:
    #constructor
    def __init__(self, name, age, hobby):
        #These are known as attributes of an object
        self.name =  name
        self.age = age
        self.hobby = hobby
    # methods
    def greet(self):
        print(f"Hey my name is {self.name}. Good morning!")
######Class Variables######
> These are common to the class
> Example: Population of Human class is common to all objects
class Human:
    #class variables
    population = 0
    data = []
    #constructor
    def __init__(self, name, age, hobby):
        #These are known as attributes of an object
        self.name =  name
        self.age = age
        self.hobby = hobby
        Human.population += 1
        Human.data.append([self.name, self.age, self.hobby])
    # methods
    def greet(self):
        print(f"Hey my name is {self.name}. Good morning!")
Human.population// 0
rajesh.population//0

######Adding More methods in class######
# More Methods
class Human:
    #class variables
    population = 0
    data = []
    #constructor
    def __init__(self, name, age, hobby, alive=True):
        #These are known as attributes of an object
        self.name =  name
        self.age = age
        self.hobby = hobby
        Human.population += 1
        Human.data.append([self.name, self.age, self.hobby])
    # methods
    def greet(self):
        print(f"Hey my name is {self.name}. Good morning!")
    def dead(self):
        if self.alive:
            print(self.name, "is no more now.")
            Human.population -= 1
            self.alive = False
        else:
            print("This person is already dead")

    def child(self, number):
        Human.population += number


