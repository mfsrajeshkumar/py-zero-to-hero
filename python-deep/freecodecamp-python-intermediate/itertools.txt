# Itertools
> The Itertools module is a collection of tools for  handling iterators in Python. It provides several functions.
> Simply put iterators or data types that can be used in a for loop. So for example, the most common iterator is the list.

#itertools: product, permutations, combinations, accumulate, groupby, and infinite iterators
from itertools import product

a = [1, 2]
b = [3]
prod = product(a, b, repeat=2)
print(list(prod))


from itertools import permutations
a = [1, 2, 3]
perm = permutations(a)
print(list(perm))

perm = permutations(a, 2)
print(list(perm))

from itertools import combinations, combinations_with_replacement

a = [1, 2, 3, 4]
comb = combinations(a, 3)

comb_wr = combinations_with_replacement(a, 2)
print(list(comb_wr))


from itertools import accumulate
import operator
a = [1, 2, 3, 4]
acc = accumulate(a) //[1, 3, 6, 10]
acc = accumulate(a, func=operator.mul) # [1, 2, 6, 24]
a = [1, 2, 5, 3, 4]

acc = accumulate(a, func=max) # [1, 2, 5, 5, 5]

from itertools import groupby
EX#1.
function smaller_than_3(x):
    return x < 3
a = [1, 2, 3, 4]
group_obj = groupby(a, key=smaller_than_3)
group_obj = groupby(a, key=lambda x: x<3) # Using lambda
for key, value in group_obj:
    print(key, list(value))

E#2.
persons = [
    {'name': 'Tim', 'age': 25},
    {'name': 'Dan', 'age': 25},
    {'name': 'Lisa', 'age': 27},
    {'name': 'Clarie', 'age': 28},
    ]

group_obj = groupby(persons, key=lambda x: x['age'])
for key, value in group_obj:
    print(key, list(value))

# Infinite iterators
from itertools import count, cycle, repeat

for i in count(10):
    print(i)
    if i == 15:
        break

So here count start value is 10 and it will increment by one for next value and not stop untill  we manually break the loop.

a = [1, 2, 3]
for i in cycle(a):
    print(i)

for i in reapeat(1, 4):
    print(i)

repeat(element, stop_value)